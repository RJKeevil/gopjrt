// Code generated by "stringer -type=DType gen_dtype_enum.go"; DO NOT EDIT.

package dtypes

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INVALID-0]
	_ = x[PRED-1]
	_ = x[S8-2]
	_ = x[S16-3]
	_ = x[S32-4]
	_ = x[S64-5]
	_ = x[U8-6]
	_ = x[U16-7]
	_ = x[U32-8]
	_ = x[U64-9]
	_ = x[F16-10]
	_ = x[F32-11]
	_ = x[F64-12]
	_ = x[BF16-13]
	_ = x[C64-14]
	_ = x[C128-15]
	_ = x[F8E5M2-16]
	_ = x[F8E4M3FN-17]
	_ = x[F8E4M3B11FNUZ-18]
	_ = x[F8E5M2FNUZ-19]
	_ = x[F8E4M3FNUZ-20]
	_ = x[S4-21]
	_ = x[U4-22]
	_ = x[TOKEN-23]
	_ = x[S2-24]
	_ = x[U2-25]
}

const _DType_name = "INVALIDPREDS8S16S32S64U8U16U32U64F16F32F64BF16C64C128F8E5M2F8E4M3FNF8E4M3B11FNUZF8E5M2FNUZF8E4M3FNUZS4U4TOKENS2U2"

var _DType_index = [...]uint8{0, 7, 11, 13, 16, 19, 22, 24, 27, 30, 33, 36, 39, 42, 46, 49, 53, 59, 67, 80, 90, 100, 102, 104, 109, 111, 113}

func (i DType) String() string {
	if i < 0 || i >= DType(len(_DType_index)-1) {
		return "DType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DType_name[_DType_index[i]:_DType_index[i+1]]
}
