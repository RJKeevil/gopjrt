// Code generated by "stringer -type=OpType gen_op_types.go"; DO NOT EDIT.

package xlabuilder

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidOp-0]
	_ = x[ParameterOp-1]
	_ = x[IotaOp-2]
	_ = x[ConstantOp-3]
	_ = x[IdentityOp-4]
	_ = x[ConvertDTypeOp-5]
	_ = x[WhereOp-6]
	_ = x[TupleOp-7]
	_ = x[GetTupleElementOp-8]
	_ = x[ReshapeOp-9]
	_ = x[BroadcastOp-10]
	_ = x[BroadcastInDimOp-11]
	_ = x[TransposeOp-12]
	_ = x[ReduceSumOp-13]
	_ = x[ReduceMaxOp-14]
	_ = x[ReduceMultiplyOp-15]
	_ = x[SliceOp-16]
	_ = x[PadOp-17]
	_ = x[GatherOp-18]
	_ = x[ScatterOp-19]
	_ = x[ConcatenateOp-20]
	_ = x[ConvGeneralDilatedOp-21]
	_ = x[ReverseOp-22]
	_ = x[ReduceWindowOp-23]
	_ = x[SelectAndScatterOp-24]
	_ = x[BatchNormTrainingOp-25]
	_ = x[BatchNormInferenceOp-26]
	_ = x[BatchNormGradOp-27]
	_ = x[DotGeneralOp-28]
	_ = x[ArgMinMaxOp-29]
	_ = x[FftOp-30]
	_ = x[AbsOp-31]
	_ = x[NegOp-32]
	_ = x[ExpOp-33]
	_ = x[Expm1Op-34]
	_ = x[FloorOp-35]
	_ = x[CeilOp-36]
	_ = x[RoundOp-37]
	_ = x[LogOp-38]
	_ = x[Log1pOp-39]
	_ = x[LogicalNotOp-40]
	_ = x[LogisticOp-41]
	_ = x[SignOp-42]
	_ = x[ClzOp-43]
	_ = x[CosOp-44]
	_ = x[SinOp-45]
	_ = x[TanhOp-46]
	_ = x[SqrtOp-47]
	_ = x[RsqrtOp-48]
	_ = x[ImagOp-49]
	_ = x[RealOp-50]
	_ = x[ConjOp-51]
	_ = x[AddOp-52]
	_ = x[MulOp-53]
	_ = x[SubOp-54]
	_ = x[DivOp-55]
	_ = x[RemOp-56]
	_ = x[AndOp-57]
	_ = x[OrOp-58]
	_ = x[XorOp-59]
	_ = x[DotOp-60]
	_ = x[MinOp-61]
	_ = x[MaxOp-62]
	_ = x[PowOp-63]
	_ = x[ComplexOp-64]
	_ = x[EqualOp-65]
	_ = x[NotEqualOp-66]
	_ = x[GreaterOrEqualOp-67]
	_ = x[GreaterThanOp-68]
	_ = x[LessOrEqualOp-69]
	_ = x[LessThanOp-70]
	_ = x[EqualTotalOrderOp-71]
	_ = x[NotEqualTotalOrderOp-72]
	_ = x[GreaterOrEqualTotalOrderOp-73]
	_ = x[GreaterThanTotalOrderOp-74]
	_ = x[LessOrEqualTotalOrderOp-75]
	_ = x[LessThanTotalOrderOp-76]
	_ = x[RngBitGeneratorOp-77]
	_ = x[RngNormalOp-78]
	_ = x[RngUniformOp-79]
}

const _OpType_name = "InvalidOpParameterOpIotaOpConstantOpIdentityOpConvertDTypeOpWhereOpTupleOpGetTupleElementOpReshapeOpBroadcastOpBroadcastInDimOpTransposeOpReduceSumOpReduceMaxOpReduceMultiplyOpSliceOpPadOpGatherOpScatterOpConcatenateOpConvGeneralDilatedOpReverseOpReduceWindowOpSelectAndScatterOpBatchNormTrainingOpBatchNormInferenceOpBatchNormGradOpDotGeneralOpArgMinMaxOpFftOpAbsOpNegOpExpOpExpm1OpFloorOpCeilOpRoundOpLogOpLog1pOpLogicalNotOpLogisticOpSignOpClzOpCosOpSinOpTanhOpSqrtOpRsqrtOpImagOpRealOpConjOpAddOpMulOpSubOpDivOpRemOpAndOpOrOpXorOpDotOpMinOpMaxOpPowOpComplexOpEqualOpNotEqualOpGreaterOrEqualOpGreaterThanOpLessOrEqualOpLessThanOpEqualTotalOrderOpNotEqualTotalOrderOpGreaterOrEqualTotalOrderOpGreaterThanTotalOrderOpLessOrEqualTotalOrderOpLessThanTotalOrderOpRngBitGeneratorOpRngNormalOpRngUniformOp"

var _OpType_index = [...]uint16{0, 9, 20, 26, 36, 46, 60, 67, 74, 91, 100, 111, 127, 138, 149, 160, 176, 183, 188, 196, 205, 218, 238, 247, 261, 279, 298, 318, 333, 345, 356, 361, 366, 371, 376, 383, 390, 396, 403, 408, 415, 427, 437, 443, 448, 453, 458, 464, 470, 477, 483, 489, 495, 500, 505, 510, 515, 520, 525, 529, 534, 539, 544, 549, 554, 563, 570, 580, 596, 609, 622, 632, 649, 669, 695, 718, 741, 761, 778, 789, 801}

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpType_index)-1) {
		return "OpType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpType_name[_OpType_index[i]:_OpType_index[i+1]]
}
