// Code generated by "stringer -type=OpType gen_op_types.go"; DO NOT EDIT.

package xlabuilder

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidOp-0]
	_ = x[ParameterOp-1]
	_ = x[IotaOp-2]
	_ = x[ConstantOp-3]
	_ = x[IdentityOp-4]
	_ = x[ConvertDTypeOp-5]
	_ = x[WhereOp-6]
	_ = x[TupleOp-7]
	_ = x[GetTupleElementOp-8]
	_ = x[ReshapeOp-9]
	_ = x[BroadcastOp-10]
	_ = x[BroadcastInDimOp-11]
	_ = x[TransposeOp-12]
	_ = x[CallOp-13]
	_ = x[ReduceSumOp-14]
	_ = x[ReduceMaxOp-15]
	_ = x[ReduceMultiplyOp-16]
	_ = x[SliceOp-17]
	_ = x[PadOp-18]
	_ = x[GatherOp-19]
	_ = x[ScatterOp-20]
	_ = x[ConcatenateOp-21]
	_ = x[ConvGeneralDilatedOp-22]
	_ = x[ReverseOp-23]
	_ = x[ReduceWindowOp-24]
	_ = x[SelectAndScatterOp-25]
	_ = x[BatchNormTrainingOp-26]
	_ = x[BatchNormInferenceOp-27]
	_ = x[BatchNormGradOp-28]
	_ = x[DotGeneralOp-29]
	_ = x[ArgMinMaxOp-30]
	_ = x[FftOp-31]
	_ = x[AbsOp-32]
	_ = x[NegOp-33]
	_ = x[ExpOp-34]
	_ = x[Expm1Op-35]
	_ = x[FloorOp-36]
	_ = x[CeilOp-37]
	_ = x[RoundOp-38]
	_ = x[LogOp-39]
	_ = x[Log1pOp-40]
	_ = x[LogicalNotOp-41]
	_ = x[LogisticOp-42]
	_ = x[SignOp-43]
	_ = x[ClzOp-44]
	_ = x[CosOp-45]
	_ = x[SinOp-46]
	_ = x[TanhOp-47]
	_ = x[SqrtOp-48]
	_ = x[RsqrtOp-49]
	_ = x[ImagOp-50]
	_ = x[RealOp-51]
	_ = x[ConjOp-52]
	_ = x[AddOp-53]
	_ = x[MulOp-54]
	_ = x[SubOp-55]
	_ = x[DivOp-56]
	_ = x[RemOp-57]
	_ = x[AndOp-58]
	_ = x[OrOp-59]
	_ = x[XorOp-60]
	_ = x[DotOp-61]
	_ = x[MinOp-62]
	_ = x[MaxOp-63]
	_ = x[PowOp-64]
	_ = x[ComplexOp-65]
	_ = x[EqualOp-66]
	_ = x[NotEqualOp-67]
	_ = x[GreaterOrEqualOp-68]
	_ = x[GreaterThanOp-69]
	_ = x[LessOrEqualOp-70]
	_ = x[LessThanOp-71]
	_ = x[EqualTotalOrderOp-72]
	_ = x[NotEqualTotalOrderOp-73]
	_ = x[GreaterOrEqualTotalOrderOp-74]
	_ = x[GreaterThanTotalOrderOp-75]
	_ = x[LessOrEqualTotalOrderOp-76]
	_ = x[LessThanTotalOrderOp-77]
	_ = x[RngBitGeneratorOp-78]
	_ = x[RngNormalOp-79]
	_ = x[RngUniformOp-80]
}

const _OpType_name = "InvalidOpParameterOpIotaOpConstantOpIdentityOpConvertDTypeOpWhereOpTupleOpGetTupleElementOpReshapeOpBroadcastOpBroadcastInDimOpTransposeOpCallOpReduceSumOpReduceMaxOpReduceMultiplyOpSliceOpPadOpGatherOpScatterOpConcatenateOpConvGeneralDilatedOpReverseOpReduceWindowOpSelectAndScatterOpBatchNormTrainingOpBatchNormInferenceOpBatchNormGradOpDotGeneralOpArgMinMaxOpFftOpAbsOpNegOpExpOpExpm1OpFloorOpCeilOpRoundOpLogOpLog1pOpLogicalNotOpLogisticOpSignOpClzOpCosOpSinOpTanhOpSqrtOpRsqrtOpImagOpRealOpConjOpAddOpMulOpSubOpDivOpRemOpAndOpOrOpXorOpDotOpMinOpMaxOpPowOpComplexOpEqualOpNotEqualOpGreaterOrEqualOpGreaterThanOpLessOrEqualOpLessThanOpEqualTotalOrderOpNotEqualTotalOrderOpGreaterOrEqualTotalOrderOpGreaterThanTotalOrderOpLessOrEqualTotalOrderOpLessThanTotalOrderOpRngBitGeneratorOpRngNormalOpRngUniformOp"

var _OpType_index = [...]uint16{0, 9, 20, 26, 36, 46, 60, 67, 74, 91, 100, 111, 127, 138, 144, 155, 166, 182, 189, 194, 202, 211, 224, 244, 253, 267, 285, 304, 324, 339, 351, 362, 367, 372, 377, 382, 389, 396, 402, 409, 414, 421, 433, 443, 449, 454, 459, 464, 470, 476, 483, 489, 495, 501, 506, 511, 516, 521, 526, 531, 535, 540, 545, 550, 555, 560, 569, 576, 586, 602, 615, 628, 638, 655, 675, 701, 724, 747, 767, 784, 795, 807}

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpType_index)-1) {
		return "OpType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpType_name[_OpType_index[i]:_OpType_index[i+1]]
}
