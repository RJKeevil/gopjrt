// Code generated by "stringer -type=OpType gen_op_types.go"; DO NOT EDIT.

package xlabuilder

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidOp-0]
	_ = x[ConstantOp-1]
	_ = x[IotaOp-2]
	_ = x[ParameterOp-3]
	_ = x[ConvertTypeOp-4]
	_ = x[WhereOp-5]
	_ = x[TupleOp-6]
	_ = x[GetTupleElementOp-7]
	_ = x[ReshapeOp-8]
	_ = x[BroadcastOp-9]
	_ = x[BroadcastInDimOp-10]
	_ = x[ReduceSumOp-11]
	_ = x[ReduceMaxOp-12]
	_ = x[ReduceMultiplyOp-13]
	_ = x[SliceOp-14]
	_ = x[PadOp-15]
	_ = x[GatherOp-16]
	_ = x[ScatterOp-17]
	_ = x[ConcatenateOp-18]
	_ = x[ConvGeneralDilatedOp-19]
	_ = x[ReverseOp-20]
	_ = x[TransposeOp-21]
	_ = x[ReduceWindowOp-22]
	_ = x[SelectAndScatterOp-23]
	_ = x[BatchNormTrainingOp-24]
	_ = x[BatchNormInferenceOp-25]
	_ = x[BatchNormGradOp-26]
	_ = x[DotGeneralOp-27]
	_ = x[ArgMinMaxOp-28]
	_ = x[FftOp-29]
	_ = x[AbsOp-30]
	_ = x[NegOp-31]
	_ = x[ExpOp-32]
	_ = x[Expm1Op-33]
	_ = x[FloorOp-34]
	_ = x[CeilOp-35]
	_ = x[RoundOp-36]
	_ = x[LogOp-37]
	_ = x[Log1pOp-38]
	_ = x[LogicalNotOp-39]
	_ = x[LogisticOp-40]
	_ = x[SignOp-41]
	_ = x[ClzOp-42]
	_ = x[CosOp-43]
	_ = x[SinOp-44]
	_ = x[TanhOp-45]
	_ = x[SqrtOp-46]
	_ = x[RsqrtOp-47]
	_ = x[ImagOp-48]
	_ = x[RealOp-49]
	_ = x[ConjOp-50]
	_ = x[AddOp-51]
	_ = x[MulOp-52]
	_ = x[SubOp-53]
	_ = x[DivOp-54]
	_ = x[RemOp-55]
	_ = x[AndOp-56]
	_ = x[OrOp-57]
	_ = x[XorOp-58]
	_ = x[DotOp-59]
	_ = x[MinOp-60]
	_ = x[MaxOp-61]
	_ = x[PowOp-62]
	_ = x[ComplexOp-63]
	_ = x[EqualOp-64]
	_ = x[NotEqualOp-65]
	_ = x[GreaterOrEqualOp-66]
	_ = x[GreaterThanOp-67]
	_ = x[LessOrEqualOp-68]
	_ = x[LessThanOp-69]
	_ = x[EqualTotalOrderOp-70]
	_ = x[NotEqualTotalOrderOp-71]
	_ = x[GreaterOrEqualTotalOrderOp-72]
	_ = x[GreaterThanTotalOrderOp-73]
	_ = x[LessOrEqualTotalOrderOp-74]
	_ = x[LessThanTotalOrderOp-75]
	_ = x[RngBitGeneratorOp-76]
	_ = x[RngNormalOp-77]
	_ = x[RngUniformOp-78]
}

const _OpType_name = "InvalidOpConstantOpIotaOpParameterOpConvertTypeOpWhereOpTupleOpGetTupleElementOpReshapeOpBroadcastOpBroadcastInDimOpReduceSumOpReduceMaxOpReduceMultiplyOpSliceOpPadOpGatherOpScatterOpConcatenateOpConvGeneralDilatedOpReverseOpTransposeOpReduceWindowOpSelectAndScatterOpBatchNormTrainingOpBatchNormInferenceOpBatchNormGradOpDotGeneralOpArgMinMaxOpFftOpAbsOpNegOpExpOpExpm1OpFloorOpCeilOpRoundOpLogOpLog1pOpLogicalNotOpLogisticOpSignOpClzOpCosOpSinOpTanhOpSqrtOpRsqrtOpImagOpRealOpConjOpAddOpMulOpSubOpDivOpRemOpAndOpOrOpXorOpDotOpMinOpMaxOpPowOpComplexOpEqualOpNotEqualOpGreaterOrEqualOpGreaterThanOpLessOrEqualOpLessThanOpEqualTotalOrderOpNotEqualTotalOrderOpGreaterOrEqualTotalOrderOpGreaterThanTotalOrderOpLessOrEqualTotalOrderOpLessThanTotalOrderOpRngBitGeneratorOpRngNormalOpRngUniformOp"

var _OpType_index = [...]uint16{0, 9, 19, 25, 36, 49, 56, 63, 80, 89, 100, 116, 127, 138, 154, 161, 166, 174, 183, 196, 216, 225, 236, 250, 268, 287, 307, 322, 334, 345, 350, 355, 360, 365, 372, 379, 385, 392, 397, 404, 416, 426, 432, 437, 442, 447, 453, 459, 466, 472, 478, 484, 489, 494, 499, 504, 509, 514, 518, 523, 528, 533, 538, 543, 552, 559, 569, 585, 598, 611, 621, 638, 658, 684, 707, 730, 750, 767, 778, 790}

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpType_index)-1) {
		return "OpType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpType_name[_OpType_index[i]:_OpType_index[i+1]]
}
